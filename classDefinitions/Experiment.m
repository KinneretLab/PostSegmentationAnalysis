classdef Experiment < handle
    % EXPERIMENT an abstract representation of an experiment, a collection of related pictures
    % This class has many large responsibilities:
    % - It computationally constructs and stores all data about the images
    %   it contains
    % - It handles filesystem access since it is the only thing aware of
    %   the file system.
    % This is the base object you start with.
    % You can get an experiment using Experiment.load(folder)
    % and from there get every other entity in the experiment with the
    % available functions.
    properties
        % An internal variable storing the absolute location of the data tables.
        % Used for file-system operations
        % type: string
        folder_
        % An internal variable storing the data generated by the experiement.
        % not to be used externally.
        % type: Map(string -> PhysicalEntity)
        data_
        % An internal variable used to store the filesystem locations of the table files.
        % not to be used externally.
        % type: Map(string -> string)
        files_
    end
    
    properties (Constant)
        % A static map holding all the experiment loaded by the MATLAB session.
        % not to be used externally.
        % type: Map(string -> EXPERIMENT)
       loaded_ = containers.Map 
    end
    
    methods (Static)
        % LOAD create a fresh experiment or load an existing experiment from memory.
        % Parameters:
        %   folder: string
        %      the absolute path to the folder where the data tables
        %      exist. If the folder was loaded before, the method will just
        %      retrieve it again without losing the calculations done on it
        %      previously. If it does not exist, this will construct a new
        %      experiment from scratch.
        % Return type: Experiment
        function obj = load(folder)
            map = Experiment.loaded_;
            map_key = Experiment.toUniqueName({folder});
            if map.isKey(map_key)
                obj = map(map_key);
            else
                obj = Experiment(folder);
                map(map_key) = obj;
            end
        end
        
        function remove(key)
            % REMOVE Remove an experiment from the experiment index.
            % This will not lead to a deletion of the current data, but can
            % allow re-calculating the experiment data anew.
            % Not recommended unless you know what you are doing.
            % Parameters:
            %   key: string or Experiment
            %      the experiment to remove, of the name of the folder it
            %      is built on.
            if isa(key, 'Experiment')
                key = key.uniqueName;
            else
                if contains(key, '/')
                    key = Experiment.toUniqueName({key});
                end
            end
            map = Experiment.loaded_;
            map.remove(key);
        end

        function clear()
            % CLEAR Wipe all experiments from the index to completely start fresh.
            % Only reccomended if you are running out of memory for the
            % MATLAB session.
            map = Experiment.loaded_;
            map.remove(map.keys);
        end
    end
    
    methods (Static, Access = private)
        function unique_name = toUniqueName(folder_names)
            regex_result = regexp(folder_names, "\w+", 'match');
            if length(folder_names) == 1
                unique_name = [regex_result{1}{end - 1}, '_', regex_result{1}{end}];
            else
                unique_name = cellfun(@(result) [result{end - 1}, '_', result{end}], regex_result, 'UniformOutput', false);
            end
        end
    end
    
    methods
        function obj = Experiment(folder)
            % EXPERIMENT construct a new experiment Don't use this. Use EXPERIMENT.LOAD() instead.     
            %   folder: string
            %      the absolute path to the folder where the data tables
            %      exist.
            if nargin > 0
                obj.folder_ = folder;
                obj.data_ = containers.Map();
                obj.files_ = containers.Map(cellfun(@class,{Cell, Bond, Vertex, DBond, Frame, BondPixelList}, 'UniformOutput', false), ...
                    cellfun(@(file) ([folder, '\', file, '.csv']), {'cells', 'bonds', 'vertices', 'directed_bonds', 'frames', 'bond_pixels'}, 'UniformOutput', false));
            else
                obj.folder_ = nan;
            end
        end
        
        function tf = eq(lhs, rhs)
            tf = reshape(strcmp(convertCharsToStrings({lhs.folder_}),convertCharsToStrings({rhs.folder_})), size(lhs));
        end
        
        function result = imread(obj, path)
            % IMREAD Reads a file relative to the experiment and converts it to a MATLAB image.
            % Parameters:
            %   path: string
            %      the path relative to experiment folder to read.
            % Return type: an image matrix (int[][] or int[][][])
            if isempty(obj)
                return
            end
            if length(obj) ~= 1
                fprintf("[ERROR] Load function called for an array of experiments. This is an ambiguous call. Plase iterate over the array instead.")
                return
            end
            result = imread([obj.folder_, '\', path]);
        end
        
        function phys_arr = lookup(obj, clazz, varargin)
            % LOOKUP Retrieves all physical entities of the deired class from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   obj (caller):
            %      the object which requests the search.
            %   clazz: string
            %      the class name of the object type you are looking for
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: clazz[] with size (1, ?)
            
            % iterate over all experiments
            result_arr = cell(1, length(obj));
            for row = 1:length(obj)
                experiment = obj(row);
                if ~experiment.data_.isKey(clazz)
                    fprintf("Indexing %ss for Experiment %s\n", clazz, experiment.folder_);
                    % load the data from the apropriate table
                    lookup_table = readtable(experiment.files_(clazz),'Delimiter',',');
                    % construct the target array of classes with the
                    % apropriate data
                    result = feval(clazz, experiment, lookup_table);
                    % save into the experiment index.
                    experiment.data_(clazz) = result;
                else
                    result = experiment.data_(clazz);
                end
                % filter result and put it into result_arr
                if nargin > 2
                    result_arr{row} = result(varargin{:});
                else
                    result_arr{row} = result;
                end
            end
            % concatenate the results of all experiments into one big row.
            phys_arr = [result_arr{:}];
        end
        
        function cell_arr = cells(obj, varargin)
            % CELLS Retrieves all cells from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: CELL[] with size (1, ?)
            cell_arr = obj.lookup(class(Cell), varargin{:});
        end

        function dbond_arr = dBonds(obj, varargin)
            % DBONDS Retrieves all directed bonds from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: DBOND[] with size (1, ?)
            dbond_arr = obj.lookup(class(DBond), varargin{:});
        end
        
        function bond_arr = bonds(obj, varargin)
            % BONDS Retrieves all bonds from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: BOND[] with size (1, ?)
            bond_arr = obj.lookup(class(Bond), varargin{:});
        end
        
        function vertex_arr = vertices(obj, varargin)
            % VERTICES Retrieves all vertices from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: VERTEX[] with size (1, ?)
            vertex_arr = obj.lookup(class(Vertex), varargin{:});
        end

        function frame_arr = frames(obj, varargin)
            % FRAMES Retrieves all frames from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: FRAME[] with size (1, ?)
            frame_arr = obj.lookup(class(Frame), varargin{:});
        end
        
        function bond_pixels_arr = bondPixelLists(obj, varargin)
            % BONDPIXELLISTS Retrieves all bond pixel lists from the experiment(s), and loads/constructs them if neccesary.
            % Additional arguments can be applied to get select slices or a
            % conditional filtering
            % for example, exp.cells([exp.cells.confidence] > 0.5) will
            % only yield cells with a confidence bigger than 0.5
            % Parameters:
            %   varargin: additional MATLAB builtin operations to apply on
            %   the result.
            % Return type: BONDPIXELLIST[] with size (1, ?)
            bond_pixels_arr = obj.lookup(class(BondPixelList), varargin{:});
        end
        
        function unique_name = uniqueName(obj)
            unique_name = Experiment.toUniqueName({obj.folder_});
        end

    end
    
end